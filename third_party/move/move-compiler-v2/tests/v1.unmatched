move-compiler/tests/move_check/borrow_tests/{
  borrow_global_acquires_1.move,
  borrow_global_acquires_2.move,
  borrow_global_acquires_3.move,
  borrow_global_acquires_duplicate_annotation.move,
  borrow_global_acquires_extraneous_annotation.move,
  borrow_global_acquires_invalid_1.move,
  borrow_global_acquires_invalid_2.move,
  borrow_global_acquires_invalid_3.move,
  borrow_global_acquires_invalid_annotation.move,
  borrow_global_acquires_missing_annotation.move,
  borrow_global_acquires_return_reference_1.move,
  borrow_global_acquires_return_reference_invalid_1.move,
  borrow_global_bad0.move,
  borrow_global_good.move,
  copy_loc_borrowed.move,
  copy_loc_borrowed_field.move,
  copy_loc_borrowed_indirect.move,
  eq_bad.move,
  eq_ok.move,
  factor_invalid_2.move,
  factor_valid_1.move,
  factor_valid_2.move,
  imm_borrow_global_lossy_acquire_invalid.move,
  imm_borrow_global_requires_acquire.move,
  imm_borrow_loc.move,
  imm_borrow_loc_trivial.move,
  imm_borrow_loc_trivial_valid.move,
  imm_borrow_loc_valid.move,
  imm_borrow_on_mut.move,
  imm_borrow_on_mut_trivial.move,
  join_borrow_unavailable_valid.move,
  move_one_branch.move,
  mutable_borrow_local_twice.move,
  mutable_borrow_local_twice_invalid.move,
  mutate_with_borrowed_loc.move,
  ref_moved_one_branch.move,
  release_cycle.move,
  return_with_borrowed_loc.move,
  writeref_borrow_invalid.move,
  writeref_borrow_valid1.move,
  writeref_borrow_valid2.move,
}
move-compiler/tests/move_check/commands/{
  abort_negative_stack_size.move,
  assign_resource.move,
  branch_assigns_then_moves.move,
  break_unreachable.move,
  consume_stack.move,
  dead_return.move,
  dead_return_local.move,
  else_moves_if_doesnt.move,
  if_moves_else_doesnt.move,
  if_moves_no_else.move,
  invalid_fallthrough2.move,
  invalid_fallthrough3.move,
  join_failure.move,
  mixed_lvalue.move,
  return_type_mismatch_and_unused_resource.move,
  while_move_local.move,
  while_move_local_2.move,
}
move-compiler/tests/move_check/control_flow/{
  for_loop_comment_following.move,
  for_loop_lparen_following.move,
  infinite_loop_with_dead_exits.move,
}
move-compiler/tests/move_check/deprecated/{
  assert_function.move,
  deprecated_constant_duplicated_struct.move,
  deprecated_constant_duplicated_struct2.move,
  deprecated_field_type.move,
  deprecated_field_type2.move,
  deprecated_placement_address.move,
  deprecated_placement_address_module_members.move,
  deprecated_placement_basecase.move,
  deprecated_placement_members.move,
  deprecated_placement_module.move,
  deprecated_placement_module2.move,
  deprecated_placement_module_members.move,
  public_script.move,
}
move-compiler/tests/move_check/examples/{
  multi_pool_money_market_token.move,
  simple_money_market_token.move,
}
move-compiler/tests/move_check/liveness/{
  copy_after_move.move,
  dead_refs_branch.move,
  dead_refs_branch_both.move,
  dead_refs_branch_both_invalid.move,
  dead_refs_branch_invalid.move,
  dead_refs_loop.move,
  dead_refs_loop_invalid.move,
  dead_refs_nested.move,
  dead_refs_nested_invalid.move,
  dead_refs_simple.move,
  dead_refs_simple_invalid.move,
  explicit_last_copy.move,
  loop_weirdness.move,
  move_in_infinite_loop_branched.move,
  mut_inline.move,
  mut_ref.move,
  trailing_semi.move,
  trailing_semi_loops.move,
  unused_assignment.move,
}
move-compiler/tests/move_check/locals/{
  assign_partial_resource.move,
  assign_resource.move,
  drop_conditional.move,
  reassign_parameter.move,
  struct_use_before_assign.move,
  unused_copyable.move,
  unused_resource.move,
  unused_resource_explicit_return.move,
  use_after_move_if.move,
  use_after_move_if_else.move,
  use_after_move_loop.move,
  use_after_move_simple.move,
  use_after_move_while.move,
}
move-compiler/tests/move_check/naming/{
  named_address_distinct_from_each_others_value.move,
  named_address_not_distinct_from_value.move,
}
move-compiler/tests/move_check/signer/{
  double_signer.move,
  keyword.move,
  misplaced_signer_arg.move,
  move_to_mutable_signer.move,
  move_to_sender.move,
  move_to_valid.move,
  st_loc.move,
  st_loc_partial.move,
  transitive.move,
  triple_signer.move,
  unused.move,
  unused_partial.move,
  write_ref.move,
}
move-compiler/tests/move_check/simplifier/{
  moved_var_not_simplified3.move,
}
move-compiler/tests/move_check/to_bytecode/{
  unassigned_address.move,
}
move-compiler/tests/move_check/typing/{
  abort_any_type.move,
  bind_pop_resource.move,
  borrow_divergent.move,
  constraints_not_satisfied_lvalues_bind_type.move,
  constraints_not_satisfied_lvalues_pack_type_args.move,
  constraints_not_satisfied_type_annotation.move,
  constraints_not_satisfied_type_arguments_internal_pack.move,
  declare_pop_resource.move,
  entry_signature_no_warning.move,
  infinite_instantiations_valid.move,
  instantiate_signatures.move,
  mutable_borrow_from_immutable.move,
  mutable_eq_and_neq_invalid.move,
  non_phantom_in_phantom_pos.move,
  pack_private_with_field.move,
  pack_unit.move,
  pack_unpack_private.move,
  pack_unpack_private_script.move,
  phantom_param_struct_decl.move,
  tuple.move,
  unused_non_phantom_param.move,
}
move-compiler/tests/move_check/v2-not-supported/{
  no_receiver_calls.move,
}
move-compiler/tests/move_check/verification/{
  cross_module_invalid.move,
  cross_module_valid.move,
  double_annotation.move,
  single_module_invalid.move,
  single_module_valid.move,
}
